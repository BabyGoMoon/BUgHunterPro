"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import { Shield, AlertTriangle, Info, Download, Copy, Play, Pause } from "lucide-react"

interface Finding {
  id: string
  severity: "Critical" | "High" | "Medium" | "Low"
  type: string
  endpoint: string
  method: string
  param?: string
  confidence: "Confirmed" | "Likely" | "Needs Review"
  toolSources: string[]
  evidence: {
    request?: string
    response?: string
    screenshot?: string
    domProof?: string
  }
  remediation: string
  cvss?: number
  cwe?: string
}

interface ScanJob {
  id: string
  target: string
  status: "queued" | "crawling" | "scanning" | "confirming" | "completed" | "failed"
  progress: number
  findings: Finding[]
  summary: {
    critical: number
    high: number
    medium: number
    low: number
    total: number
  }
  startedAt: string
  completedAt?: string
}

export default function UltimateVulnerabilityScanner() {
  const [target, setTarget] = useState("")
  const [currentJob, setCurrentJob] = useState<ScanJob | null>(null)
  const [isScanning, setIsScanning] = useState(false)
  const [showConsent, setShowConsent] = useState(false)

  const startScan = async () => {
    if (!target) return

    setShowConsent(true)
  }

  const confirmScan = async () => {
    setShowConsent(false)
    setIsScanning(true)

    try {
      const response = await fetch("/api/ultimate-scan", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          target,
          scope: { maxDepth: 3, rateLimitRps: 2 },
        }),
      })

      const { jobId } = await response.json()

      // Poll for updates
      const pollInterval = setInterval(async () => {
        const jobResponse = await fetch(`/api/ultimate-scan?jobId=${jobId}`)
        const job = await jobResponse.json()

        setCurrentJob(job)

        if (job.status === "completed" || job.status === "failed") {
          clearInterval(pollInterval)
          setIsScanning(false)
        }
      }, 1000)
    } catch (error) {
      console.error("Scan failed:", error)
      setIsScanning(false)
    }
  }

  const exportResults = (format: "json" | "csv" | "pdf") => {
    if (!currentJob) return

    if (format === "json") {
      const dataStr = JSON.stringify(currentJob, null, 2)
      const dataBlob = new Blob([dataStr], { type: "application/json" })
      const url = URL.createObjectURL(dataBlob)
      const link = document.createElement("a")
      link.href = url
      link.download = `vulnerability-scan-${currentJob.id}.json`
      link.click()
    } else if (format === "csv") {
      const csvContent = [
        "Severity,Type,Endpoint,Method,Confidence,CVSS,CWE,Remediation",
        ...currentJob.findings.map(
          (f) =>
            `${f.severity},${f.type},${f.endpoint},${f.method},${f.confidence},${f.cvss},${f.cwe},"${f.remediation}"`,
        ),
      ].join("\n")

      const dataBlob = new Blob([csvContent], { type: "text/csv" })
      const url = URL.createObjectURL(dataBlob)
      const link = document.createElement("a")
      link.href = url
      link.download = `vulnerability-scan-${currentJob.id}.csv`
      link.click()
    }
  }

  const copyPayload = (finding: Finding) => {
    const payload = finding.evidence.request || `${finding.method} ${finding.endpoint}`
    navigator.clipboard.writeText(payload)
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "Critical":
        return <AlertTriangle className="h-5 w-5 text-red-500" />
      case "High":
        return <AlertTriangle className="h-5 w-5 text-orange-500" />
      case "Medium":
        return <Info className="h-5 w-5 text-yellow-500" />
      case "Low":
        return <Info className="h-5 w-5 text-blue-500" />
      default:
        return <Shield className="h-5 w-5" />
    }
  }

  const getSeverityClass = (severity: string) => {
    switch (severity) {
      case "Critical":
        return "severity-critical"
      case "High":
        return "severity-high"
      case "Medium":
        return "severity-medium"
      case "Low":
        return "severity-low"
      default:
        return ""
    }
  }

  const getConfidenceColor = (confidence: string) => {
    switch (confidence) {
      case "Confirmed":
        return "bg-green-500"
      case "Likely":
        return "bg-yellow-500"
      case "Needs Review":
        return "bg-red-500"
      default:
        return "bg-gray-500"
    }
  }

  return (
    <div className="space-y-6">
      {/* Scan Input */}
      <Card className="border-primary-green/20">
        <CardHeader>
          <CardTitle className="text-primary-green header-title">Ultimate Vulnerability Scanner</CardTitle>
          <p className="text-muted-foreground">
            OWASP Top 10 coverage with real-time confirmation and evidence collection
          </p>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-4">
            <Input
              placeholder="https://example.com"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              className="flex-1"
              disabled={isScanning}
            />
            <Button
              onClick={startScan}
              disabled={!target || isScanning}
              className="bg-primary-green hover:bg-vibrant-green text-black"
            >
              {isScanning ? <Pause className="h-4 w-4 mr-2" /> : <Play className="h-4 w-4 mr-2" />}
              {isScanning ? "Scanning..." : "Start Scan"}
            </Button>
          </div>

          {currentJob && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Status: {currentJob.status}</span>
                <span>{currentJob.progress}%</span>
              </div>
              <Progress value={currentJob.progress} className="h-2" />
            </div>
          )}
        </CardContent>
      </Card>

      {/* Consent Modal */}
      {showConsent && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <Card className="max-w-md mx-4">
            <CardHeader>
              <CardTitle className="text-red-500">⚠️ Authorization Required</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-sm">
                I confirm that I have proper authorization to scan this target and will use the results responsibly.
              </p>
              <div className="flex gap-2">
                <Button onClick={confirmScan} className="bg-primary-green hover:bg-vibrant-green text-black">
                  I Confirm
                </Button>
                <Button variant="outline" onClick={() => setShowConsent(false)}>
                  Cancel
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Results */}
      {currentJob && currentJob.findings.length > 0 && (
        <div className="space-y-6">
          {/* Summary */}
          <Card className="border-primary-green/20">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle className="text-primary-green">Scan Results</CardTitle>
                <div className="flex gap-2">
                  <Button size="sm" variant="outline" onClick={() => exportResults("json")} className="export-button">
                    <Download className="h-4 w-4 mr-2" />
                    JSON
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => exportResults("csv")}
                    className="export-button export-csv"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    CSV
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-500">{currentJob.summary.critical}</div>
                  <div className="text-sm text-muted-foreground">Critical</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-500">{currentJob.summary.high}</div>
                  <div className="text-sm text-muted-foreground">High</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-yellow-500">{currentJob.summary.medium}</div>
                  <div className="text-sm text-muted-foreground">Medium</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-500">{currentJob.summary.low}</div>
                  <div className="text-sm text-muted-foreground">Low</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Severity Boxes */}
          {(["Critical", "High", "Medium", "Low"] as const).map((severity) => {
            const findings = currentJob.findings.filter((f) => f.severity === severity)
            if (findings.length === 0) return null

            return (
              <div key={severity} className={getSeverityClass(severity)}>
                <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                  {getSeverityIcon(severity)}
                  {severity} ({findings.length})
                </h3>

                <div className="space-y-3">
                  {findings.map((finding) => (
                    <Collapsible key={finding.id}>
                      <CollapsibleTrigger className="w-full">
                        <Card className="hover:bg-background/50 transition-colors">
                          <CardContent className="p-4">
                            <div className="flex justify-between items-start">
                              <div className="text-left">
                                <h4 className="font-semibold">{finding.type}</h4>
                                <p className="text-sm text-muted-foreground">
                                  {finding.method} {finding.endpoint}
                                  {finding.param && ` (${finding.param})`}
                                </p>
                              </div>
                              <div className="flex gap-2">
                                <Badge className={getConfidenceColor(finding.confidence)}>{finding.confidence}</Badge>
                                <Badge variant="outline">CVSS {finding.cvss}</Badge>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      </CollapsibleTrigger>

                      <CollapsibleContent>
                        <Card className="mt-2 border-l-4 border-l-primary-green">
                          <CardContent className="p-4">
                            <Tabs defaultValue="details">
                              <TabsList>
                                <TabsTrigger value="details">Details</TabsTrigger>
                                <TabsTrigger value="evidence">Evidence</TabsTrigger>
                                <TabsTrigger value="fix">How to Fix</TabsTrigger>
                              </TabsList>

                              <TabsContent value="details" className="space-y-2">
                                <div>
                                  <strong>CWE:</strong> {finding.cwe}
                                </div>
                                <div>
                                  <strong>Tools:</strong> {finding.toolSources.join(", ")}
                                </div>
                                <div>
                                  <strong>Confidence:</strong> {finding.confidence}
                                </div>
                              </TabsContent>

                              <TabsContent value="evidence" className="space-y-2">
                                {finding.evidence.request && (
                                  <div>
                                    <strong>Request:</strong>
                                    <pre className="bg-background/50 p-2 rounded text-xs overflow-x-auto">
                                      {finding.evidence.request}
                                    </pre>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => copyPayload(finding)}
                                      className="mt-2"
                                    >
                                      <Copy className="h-4 w-4 mr-2" />
                                      Copy PoC
                                    </Button>
                                  </div>
                                )}
                                {finding.evidence.response && (
                                  <div>
                                    <strong>Response:</strong>
                                    <pre className="bg-background/50 p-2 rounded text-xs overflow-x-auto">
                                      {finding.evidence.response}
                                    </pre>
                                  </div>
                                )}
                              </TabsContent>

                              <TabsContent value="fix">
                                <p className="text-sm">{finding.remediation}</p>
                              </TabsContent>
                            </Tabs>
                          </CardContent>
                        </Card>
                      </CollapsibleContent>
                    </Collapsible>
                  ))}
                </div>
              </div>
            )
          })}
        </div>
      )}
    </div>
  )
}
