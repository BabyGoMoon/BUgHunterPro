"use client"
import { useEffect, useRef, useState } from "react"

interface VulnerabilityGraphProps {
  isScanning: boolean
}

interface Vulnerability {
  id: string
  x: number
  y: number
  severity: "critical" | "high" | "medium" | "low"
  type: string
  discovered: boolean
}

export function VulnerabilityGraph({ isScanning }: VulnerabilityGraphProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    canvas.width = 600
    canvas.height = 300

    // Initialize vulnerabilities
    const initialVulns: Vulnerability[] = [
      { id: "1", x: 100, y: 150, severity: "critical", type: "SQL Injection", discovered: false },
      { id: "2", x: 200, y: 100, severity: "high", type: "XSS", discovered: false },
      { id: "3", x: 300, y: 200, severity: "medium", type: "CSRF", discovered: false },
      { id: "4", x: 400, y: 120, severity: "low", type: "Info Disclosure", discovered: false },
      { id: "5", x: 500, y: 180, severity: "critical", type: "RCE", discovered: false },
      { id: "6", x: 150, y: 250, severity: "high", type: "Directory Traversal", discovered: false },
    ]

    setVulnerabilities(initialVulns)
  }, [])

  useEffect(() => {
    if (!isScanning) return

    const interval = setInterval(() => {
      setVulnerabilities((prev) => {
        const undiscovered = prev.filter((v) => !v.discovered)
        if (undiscovered.length === 0) return prev

        const randomIndex = Math.floor(Math.random() * undiscovered.length)
        const vulnToDiscover = undiscovered[randomIndex]

        return prev.map((v) => (v.id === vulnToDiscover.id ? { ...v, discovered: true } : v))
      })
    }, 2000)

    return () => clearInterval(interval)
  }, [isScanning])

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    let animationId: number

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      // Draw grid
      ctx.strokeStyle = "rgba(0, 255, 0, 0.1)"
      ctx.lineWidth = 1
      for (let i = 0; i < canvas.width; i += 50) {
        ctx.beginPath()
        ctx.moveTo(i, 0)
        ctx.lineTo(i, canvas.height)
        ctx.stroke()
      }
      for (let i = 0; i < canvas.height; i += 50) {
        ctx.beginPath()
        ctx.moveTo(0, i)
        ctx.lineTo(canvas.width, i)
        ctx.stroke()
      }

      // Draw connections between discovered vulnerabilities
      const discovered = vulnerabilities.filter((v) => v.discovered)
      ctx.strokeStyle = "rgba(0, 255, 0, 0.3)"
      ctx.lineWidth = 2
      for (let i = 0; i < discovered.length - 1; i++) {
        const current = discovered[i]
        const next = discovered[i + 1]
        ctx.beginPath()
        ctx.moveTo(current.x, current.y)
        ctx.lineTo(next.x, next.y)
        ctx.stroke()
      }

      // Draw vulnerabilities
      vulnerabilities.forEach((vuln) => {
        const colors = {
          critical: "#00FF00",
          high: "#18FF6D",
          medium: "#009862",
          low: "#34403A",
        }

        const color = colors[vuln.severity]
        const radius = vuln.discovered ? 12 : 6
        const opacity = vuln.discovered ? 1 : 0.3

        // Draw glow effect for discovered vulnerabilities
        if (vuln.discovered) {
          ctx.beginPath()
          ctx.arc(vuln.x, vuln.y, radius + 8, 0, Math.PI * 2)
          ctx.fillStyle = `${color}20`
          ctx.fill()
        }

        // Draw main circle
        ctx.beginPath()
        ctx.arc(vuln.x, vuln.y, radius, 0, Math.PI * 2)
        ctx.fillStyle = color
        ctx.globalAlpha = opacity
        ctx.fill()
        ctx.globalAlpha = 1

        // Draw pulse effect for newly discovered
        if (vuln.discovered && isScanning) {
          const pulseRadius = radius + Math.sin(Date.now() * 0.01) * 5
          ctx.beginPath()
          ctx.arc(vuln.x, vuln.y, pulseRadius, 0, Math.PI * 2)
          ctx.strokeStyle = color
          ctx.lineWidth = 2
          ctx.globalAlpha = 0.5
          ctx.stroke()
          ctx.globalAlpha = 1
        }

        // Draw label for discovered vulnerabilities
        if (vuln.discovered) {
          ctx.fillStyle = "#ffffff"
          ctx.font = "10px monospace"
          ctx.textAlign = "center"
          ctx.fillText(vuln.type, vuln.x, vuln.y - radius - 8)
        }
      })

      animationId = requestAnimationFrame(animate)
    }

    animate()

    return () => {
      if (animationId) {
        cancelAnimationFrame(animationId)
      }
    }
  }, [vulnerabilities, isScanning])

  const discoveredCount = vulnerabilities.filter((v) => v.discovered).length
  const severityCounts = vulnerabilities
    .filter((v) => v.discovered)
    .reduce(
      (acc, v) => {
        acc[v.severity]++
        return acc
      },
      { critical: 0, high: 0, medium: 0, low: 0 },
    )

  return (
    <div className="space-y-4">
      <canvas ref={canvasRef} className="w-full h-auto bg-black/20 rounded-lg border border-primary-green/10" />

      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
        <div className="flex items-center justify-between p-2 rounded bg-critical/10 border border-critical/20">
          <span className="text-critical">Critical</span>
          <span className="font-mono text-critical">{severityCounts.critical}</span>
        </div>
        <div className="flex items-center justify-between p-2 rounded bg-high/10 border border-high/20">
          <span className="text-high">High</span>
          <span className="font-mono text-high">{severityCounts.high}</span>
        </div>
        <div className="flex items-center justify-between p-2 rounded bg-medium/10 border border-medium/20">
          <span className="text-medium">Medium</span>
          <span className="font-mono text-medium">{severityCounts.medium}</span>
        </div>
        <div className="flex items-center justify-between p-2 rounded bg-low/10 border border-low/20">
          <span className="text-low">Low</span>
          <span className="font-mono text-low">{severityCounts.low}</span>
        </div>
      </div>

      <div className="text-center text-sm text-foreground/60">
        Discovered: {discoveredCount} / {vulnerabilities.length} vulnerabilities
      </div>
    </div>
  )
}
